{"version":3,"sources":["assets/rubber-duck.svg","components/Clock/index.tsx","utils/countdown/index.ts","components/ContainerDuck/index.tsx","utils/useGetVotes/index.ts","components/RadioVote/index.tsx","utils/createVotePercentage/index.ts","components/Vote/index.tsx","utils/useUpdateMetaData/index.ts","config/index.ts","serviceWorker.ts","index.tsx","components/App/index.tsx"],"names":["module","exports","useStyles","makeStyles","clock","minWidth","borderRadius","letterSpacing","lineHeight","fontSize","color","background","Clock","classes","finalDate","Date","getTime","useState","time","setTime","useEffect","setInterval","now","timeRemaining","days","Math","floor","hours","minutes","seconds","useGetTimeValues","Grid","container","direction","justify","className","CircularProgress","ContainerDuck","alignItems","item","style","padding","src","rubberduck","alt","useGetVotes","useDocument","firebase","doc","value","data","boyValue","boy","girlValue","girl","paddingLeft","RadioVote","name","gender","hasVoted","boyPercentage","girlPercentage","createVotePercentage","Typography","FormControlLabel","control","Radio","label","Vote","initialVotedState","JSON","parse","window","localStorage","getItem","setHasVoted","setItem","stringify","updateMetaData","a","db","collection","result","update","console","log","undefined","setValue","paddingTop","paddingBottom","RadioGroup","onChange","event","target","Button","onClick","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","app","initializeApp","Boolean","location","hostname","match","ReactDOM","render","Card","margin","boxShadow","variant","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59767ea5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rubber-duck.1f8e5c69.svg\";","import { CircularProgress, Grid, makeStyles } from \"@material-ui/core\"\nimport React from \"react\"\nimport { useGetTimeValues } from \"../../utils/countdown\"\nimport \"./index.scss\"\n\nconst useStyles = makeStyles({\n  clock: {\n    minWidth: 200,\n    borderRadius: 5,\n    letterSpacing: 4,\n    lineHeight: 0,\n    fontSize: \"1.25rem\",\n    color: \"#fff\",\n    background: \"rgba(0, 0, 0, 0.3)\",\n  },\n})\n\nexport const Clock = () => {\n  const classes = useStyles()\n  const { days, hours, minutes, seconds } = useGetTimeValues()\n  return (\n    <Grid container direction=\"row\" justify=\"center\" className={classes.clock}>\n      {days ? (\n        <p>\n          {days}:{hours}:{minutes}:{seconds}\n        </p>\n      ) : (\n        <CircularProgress color=\"secondary\" />\n      )}\n    </Grid>\n  )\n}\n","import { useEffect, useState } from \"react\"\n\nexport interface CountDownTime {\n  days?: number\n  hours?: number\n  minutes?: number\n  seconds?: number\n}\n\nexport const useGetTimeValues = (): CountDownTime => {\n  const finalDate = new Date(\"March 14, 2020 16:00:00\").getTime()\n  const [time, setTime] = useState<CountDownTime>()\n  useEffect(() => {\n    setInterval(() => {\n      const now = new Date().getTime()\n      const timeRemaining = finalDate - now\n      setTime({\n        days: Math.floor(timeRemaining / (1000 * 60 * 60 * 24)),\n        hours: Math.floor(\n          (timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),\n        ),\n        minutes: Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60)),\n        seconds: Math.floor((timeRemaining % (1000 * 60)) / 1000),\n      })\n    }, 1000)\n  }, [finalDate])\n  return {\n    days: time && time.days,\n    hours: time && time.hours,\n    minutes: time && time.minutes,\n    seconds: time && time.seconds,\n  }\n}\n","import { Grid } from \"@material-ui/core\"\nimport React from \"react\"\nimport rubberduck from \"../../assets/rubber-duck.svg\"\nimport { Clock } from \"../Clock\"\n\nexport const ContainerDuck = () => {\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"space-between\"\n    >\n      <Grid item>\n        <img\n          style={{ padding: 24 }}\n          src={rubberduck}\n          className=\"App-logo\"\n          alt=\"logo\"\n        />\n      </Grid>\n      <Grid item>\n        <Clock />\n      </Grid>\n    </Grid>\n  )\n}\n","import * as firebase from \"firebase/app\"\nimport { useDocument } from \"react-firebase-hooks/firestore\"\n\nexport const useGetVotes = () => {\n  const [value] = useDocument(\n    firebase.firestore().doc(\"voteGlobal/A4iNoZqlJQlUOiGMt5JH\"),\n  )\n  const data = value && value.data() && value.data()\n  const boyValue = data && data.boy\n  const girlValue = data && data.girl\n  return { boyValue, girlValue }\n}\n","import {\n  FormControlLabel,\n  Grid,\n  Radio,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\"\nimport React from \"react\"\nimport { createVotePercentage } from \"../../utils/createVotePercentage\"\nimport { useGetVotes } from \"../../utils/useGetVotes\"\n\nconst useStyles = makeStyles({\n  boy: {\n    color: \"rgba(0,255,224,1)\",\n    paddingLeft: 8,\n  },\n  girl: {\n    color: \"rgba(213,80,211,1)\",\n    paddingLeft: 8,\n  },\n})\n\ninterface Props {\n  name: string\n  gender: string\n  hasVoted: boolean\n  setHasVoted: Function\n}\n\nexport const RadioVote = ({ name, gender, hasVoted }: Props) => {\n  const classes = useStyles()\n  const { boyValue, girlValue } = useGetVotes()\n  const { girlPercentage, boyPercentage } = createVotePercentage(\n    boyValue,\n    girlValue,\n  )\n\n  return !hasVoted ? (\n    <FormControlLabel\n      value={gender}\n      control={<Radio color=\"default\" />}\n      label={\n        <Grid container direction=\"row\">\n          <Typography>{name}</Typography>\n        </Grid>\n      }\n    />\n  ) : (\n    <Grid container direction=\"row\">\n      <Typography style={{ padding: 16 }}>{name}</Typography>\n      <Typography\n        style={{ padding: 16 }}\n        className={gender === \"boy\" ? classes.boy : classes.girl}\n      >\n        {`${gender === \"boy\" ? boyPercentage : girlPercentage}%`}\n      </Typography>\n    </Grid>\n  )\n}\n","import { GlobalVote } from \"../../types/GlobalVote\"\n\nexport const createVotePercentage = (\n  boy: GlobalVote[\"boy\"],\n  girl: GlobalVote[\"girl\"],\n) => {\n  const boyPercentage = Math.floor((boy * 100) / (boy + girl))\n  const girlPercentage = Math.floor((girl * 100) / (boy + girl))\n  return {\n    boyPercentage: boyPercentage ? boyPercentage : 0,\n    girlPercentage: girlPercentage ? girlPercentage : 0,\n  }\n}\n","import { Button, Grid, RadioGroup, Typography } from \"@material-ui/core\"\nimport React, { useEffect, useState } from \"react\"\nimport { useGetVotes } from \"../../utils/useGetVotes\"\nimport { useUpdateMetaData } from \"../../utils/useUpdateMetaData\"\nimport { RadioVote } from \"../RadioVote\"\n\nexport const Vote = () => {\n  const initialVotedState = JSON.parse(\n    window.localStorage.getItem(\"hasVoted\") as string,\n  )\n    ? true\n    : false\n  const [hasVoted, setHasVoted] = useState<boolean>(initialVotedState)\n  useEffect(() => {\n    window.localStorage.setItem(\"hasVoted\", JSON.stringify(hasVoted))\n  }, [hasVoted])\n  const { boyValue, girlValue } = useGetVotes()\n  const { updateMetaData } = useUpdateMetaData()\n  const [value, setValue] = useState<string>(\"\")\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue((event.target as HTMLInputElement).value)\n  }\n  const handleSubmit = () => {\n    value === \"boy\"\n      ? updateMetaData(boyValue + 1, girlValue)\n      : updateMetaData(boyValue, girlValue + 1)\n    setHasVoted(true)\n  }\n  return (\n    <Grid container direction=\"column\" style={{ paddingTop: 24 }}>\n      {hasVoted ? (\n        <Typography style={{ paddingBottom: 16 }}>\n          Thanks for voting!\n        </Typography>\n      ) : (\n        <Typography style={{ paddingBottom: 16 }}>Vote Below:</Typography>\n      )}\n      <RadioGroup value={value} onChange={handleChange}>\n        <RadioVote\n          name=\"Walter\"\n          gender=\"boy\"\n          setHasVoted={setHasVoted}\n          hasVoted={hasVoted}\n        />\n        <RadioVote\n          name=\"Lynette\"\n          gender=\"girl\"\n          setHasVoted={setHasVoted}\n          hasVoted={hasVoted}\n        />\n      </RadioGroup>\n      {!hasVoted && <Button onClick={() => handleSubmit()}>Vote</Button>}\n    </Grid>\n  )\n}\n","import * as firebase from \"firebase/app\"\nimport { GlobalVote } from \"../../types/GlobalVote\"\n\nexport const useUpdateMetaData = () => {\n  const updateMetaData = async (\n    boy: GlobalVote[\"boy\"],\n    girl: GlobalVote[\"girl\"],\n  ) => {\n    const db = firebase.firestore()\n    try {\n      const result = await db\n        .collection(\"voteGlobal\")\n        .doc(\"A4iNoZqlJQlUOiGMt5JH\")\n      return result.update({ girl, boy })\n    } catch (error) {\n      console.log(\"Unable to create document: \", error)\n    }\n    return undefined\n  }\n  return { updateMetaData }\n}\n","import app from \"firebase/app\"\nimport \"firebase/auth\"\nimport \"firebase/database\"\nimport \"firebase/firestore\"\n\nexport const firebase = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n}\n\nclass Firebase {\n  public constructor() {\n    app.initializeApp(firebase)\n  }\n}\n\nexport default Firebase\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                // tslint:disable-line\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\") // tslint:disable-line\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error) // tslint:disable-line\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      ) // tslint:disable-line\n    })\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            // tslint:disable-line\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./components/App\"\nimport \"firebase/firestore\"\nimport Firebase from \"./config\"\nimport \"./index.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nnew Firebase()\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { Card, Grid, Typography } from \"@material-ui/core\"\nimport React from \"react\"\nimport \"./styles.css\"\nimport { ContainerDuck } from \"../ContainerDuck\"\nimport { Vote } from \"../Vote\"\n\nexport function App() {\n  return (\n    <Grid\n      container\n      className=\"App\"\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Card\n        style={{\n          minWidth: 325,\n          padding: 75,\n          margin: 16,\n          boxShadow: \"0px 2px 6px rgba(0, 0, 0, 0.15)\",\n          borderRadius: 8,\n          background:\n            \"linear-gradient(90deg, rgba(213,80,211,1) 21%, rgba(0,255,224,1) 100%)\",\n        }}\n      >\n        <ContainerDuck />\n      </Card>\n      <Grid item>\n        <Typography variant=\"h5\">#WhoTheDuckIsIt?</Typography>\n      </Grid>\n      <Grid item>\n        <Vote />\n      </Grid>\n    </Grid>\n  )\n}\n"],"sourceRoot":""}