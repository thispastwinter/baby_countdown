{"version":3,"sources":["assets/duck.png","assets/duck-boy.png","assets/duck-girl.png","types/Names.ts","types/Gender.ts","utils/useGetVotes/index.ts","components/Clock/index.tsx","utils/countdown/index.ts","components/ContainerVotePercentage/index.tsx","components/CardVotePercentage/index.tsx","utils/useVotePercentage/index.ts","components/ContainerDuck/index.tsx","utils/findIcon/index.tsx","components/RadioVote/index.tsx","components/ContainerVote/index.tsx","utils/useUpdateMetaData/index.ts","config/index.ts","serviceWorker.ts","index.tsx","components/App/index.tsx"],"names":["module","exports","Names","Gender","useGetVotes","useDocument","firebase","doc","value","data","boyValue","boy","girlValue","girl","useStyles","makeStyles","clock","maxWidth","lineHeight","fontFamily","fontSize","color","background","Clock","classes","finalDate","Date","getTime","useState","time","setTime","useEffect","setInterval","now","timeRemaining","days","Math","floor","hours","minutes","seconds","useGetTimeValues","Grid","container","direction","justify","alignItems","className","CircularProgress","ContainerVotePercentage","percent","name","item","style","width","Typography","variant","paddingTop","substring","CardVotePercentage","children","boyPercentage","round","girlPercentage","console","log","useVotePercentage","Card","height","padding","margin","boxShadow","borderRadius","wrap","LYNNETTE","WALTER","ContainerDuck","top","position","src","duck","alt","icon","transition","iconChecked","RadioVote","gender","hasVoted","findIcon","checked","role","aria-label","BOY","GIRL","duckBoy","duckGirl","useFindIcon","Radio","checkedIcon","Vote","initialVotedState","JSON","parse","window","localStorage","getItem","setHasVoted","setItem","stringify","setValue","handleUpdate","updateMetaData","a","db","collection","result","update","undefined","useUpdateMetaData","RadioGroup","onChange","event","target","Button","onClick","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","app","initializeApp","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfde7931.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/duck.4402e49d.png\";","module.exports = __webpack_public_path__ + \"static/media/duck-boy.9d1cabc9.png\";","module.exports = __webpack_public_path__ + \"static/media/duck-girl.3b57da37.png\";","export enum Names {\n  WALTER = \"Walter\",\n  LYNNETTE = \"Lynnette\",\n}\n","export enum Gender {\n  BOY = \"boy\",\n  GIRL = \"girl\",\n}\n","import * as firebase from \"firebase/app\"\nimport { useDocument } from \"react-firebase-hooks/firestore\"\n\nexport const useGetVotes = () => {\n  const [value] = useDocument(\n    firebase.firestore().doc(\"voteGlobal/A4iNoZqlJQlUOiGMt5JH\"),\n  )\n  const data = value && value.data() && value.data()\n  const boyValue = data && data.boy\n  const girlValue = data && data.girl\n  return { boyValue, girlValue }\n}\n","import { CircularProgress, Grid, makeStyles } from \"@material-ui/core\"\nimport React from \"react\"\nimport { useGetTimeValues } from \"../../utils/countdown\"\n\nconst useStyles = makeStyles({\n  clock: {\n    maxWidth: 325,\n    lineHeight: 0,\n    fontFamily: \"Subway-Ticker\",\n    fontSize: \"3.5rem\",\n    color: \"#fff\",\n    background: \"rgba(0, 0, 0, 0.3)\",\n  },\n})\n\nexport const Clock = () => {\n  const classes = useStyles()\n  const { days, hours, minutes, seconds } = useGetTimeValues()\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n      className={classes.clock}\n    >\n      {days ? (\n        <p>\n          {days}:{hours}:{minutes}:{seconds}\n        </p>\n      ) : (\n        <CircularProgress color=\"secondary\" />\n      )}\n    </Grid>\n  )\n}\n","import { useEffect, useState } from \"react\"\n\nexport interface CountDownTime {\n  days?: number\n  hours?: number\n  minutes?: number\n  seconds?: number\n}\n\nexport const useGetTimeValues = (): CountDownTime => {\n  const finalDate = new Date(\"March 14, 2020 16:00:00\").getTime()\n  const [time, setTime] = useState<CountDownTime>()\n  useEffect(() => {\n    setInterval(() => {\n      const now = new Date().getTime()\n      const timeRemaining = finalDate - now\n      setTime({\n        days: Math.floor(timeRemaining / (1000 * 60 * 60 * 24)),\n        hours: Math.floor(\n          (timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),\n        ),\n        minutes: Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60)),\n        seconds: Math.floor((timeRemaining % (1000 * 60)) / 1000),\n      })\n    }, 10)\n  }, [finalDate])\n  return {\n    days: time && time.days,\n    hours: time && time.hours,\n    minutes: time && time.minutes,\n    seconds: time && time.seconds,\n  }\n}\n","import { Grid, Typography } from \"@material-ui/core\"\nimport React from \"react\"\nimport { Names } from \"../../types/Names\"\n\ninterface Props {\n  percent: number\n  name: Names\n  color: string\n}\n\nexport const ContainerVotePercentage = ({ percent, name, color }: Props) => {\n  return percent > 0 ? (\n    <Grid\n      item\n      style={{\n        background: color,\n        width: `${percent}%`,\n      }}\n    >\n      <Typography\n        variant=\"h4\"\n        style={{\n          paddingTop: 24,\n          fontSize: \"2rem\",\n          color: \"white\",\n        }}\n      >\n        {percent > 9 ? `${percent}%` : null}\n        <br></br>\n      </Typography>\n      <Typography style={{ color: \"white\" }}>\n        {percent > 20\n          ? name\n          : percent < 20 && percent > 9\n          ? `${name.substring(0, 3)}...`\n          : null}\n      </Typography>\n    </Grid>\n  ) : null\n}\n","import { Card, Grid } from \"@material-ui/core\"\nimport React, { ReactNode } from \"react\"\nimport { Names } from \"../../types/Names\"\nimport { useVotePercentage } from \"../../utils/useVotePercentage\"\nimport { Clock } from \"../Clock\"\nimport { ContainerVotePercentage } from \"../ContainerVotePercentage\"\n\ninterface Props {\n  children: ReactNode\n}\n\nexport const CardVotePercentage = ({ children }: Props) => {\n  const { girlPercentage, boyPercentage } = useVotePercentage()\n  return (\n    <Card\n      style={{\n        width: 325,\n        height: 325,\n        padding: 0,\n        margin: 16,\n        boxShadow: \"0px 2px 6px rgba(0, 0, 0, 0.15)\",\n        borderRadius: 8,\n      }}\n    >\n      <Grid container style={{ height: \"100%\" }} direction=\"row\" wrap=\"wrap\">\n        <ContainerVotePercentage\n          percent={girlPercentage}\n          name={Names.LYNNETTE}\n          color=\"rgba(213,80,211,1)\"\n        />\n        <ContainerVotePercentage\n          percent={boyPercentage}\n          name={Names.WALTER}\n          color=\"rgba(0,255,224,1)\"\n        />\n        <Clock />\n      </Grid>\n\n      {children}\n    </Card>\n  )\n}\n","import { useGetVotes } from \"../useGetVotes\"\n\nexport const useVotePercentage = () => {\n  const { boyValue, girlValue } = useGetVotes()\n  const boyPercentage = Math.round((boyValue * 100) / (boyValue + girlValue))\n  const girlPercentage = Math.round((girlValue * 100) / (boyValue + girlValue))\n  console.log(boyPercentage, girlPercentage)\n  return {\n    boyPercentage: boyPercentage ? boyPercentage : 0,\n    girlPercentage: girlPercentage ? girlPercentage : 0,\n  }\n}\n","import { Grid } from \"@material-ui/core\"\nimport React from \"react\"\nimport duck from \"../../assets/duck.png\"\n\nexport const ContainerDuck = () => {\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"space-between\"\n    >\n      <img\n        style={{ top: 180, width: 75, position: \"absolute\" }}\n        src={duck}\n        className=\"App-logo\"\n        alt=\"logo\"\n      />\n    </Grid>\n  )\n}\n","import { makeStyles } from \"@material-ui/core\"\nimport React from \"react\"\nimport duckBoy from \"../../assets/duck-boy.png\"\nimport duckGirl from \"../../assets/duck-girl.png\"\nimport { Gender } from \"../../types/Gender\"\n\nconst useStyles = makeStyles({\n  icon: {\n    width: 40,\n    transition: \".5s\",\n  },\n  iconChecked: {\n    width: 60,\n    transition: \".5s\",\n  },\n})\n\nexport const useFindIcon = () => {\n  const classes = useStyles()\n  const findIcon = (gender: Gender, checked?: boolean) => {\n    return (\n      <span\n        role=\"img\"\n        aria-label={gender === Gender.BOY ? Gender.BOY : Gender.GIRL}\n      >\n        <img\n          alt=\"boy duck or girl duck\"\n          className={checked ? classes.iconChecked : classes.icon}\n          src={gender === Gender.BOY ? duckBoy : duckGirl}\n        />\n      </span>\n    )\n  }\n  return { findIcon }\n}\n","import { Grid, Radio, Typography } from \"@material-ui/core\"\nimport React from \"react\"\nimport { Gender } from \"../../types/Gender\"\nimport { Names } from \"../../types/Names\"\nimport { useFindIcon } from \"../../utils/findIcon\"\n\ninterface Props {\n  name: Names\n  gender: Gender\n  hasVoted: boolean\n}\n\nexport const RadioVote = ({ name, gender, hasVoted }: Props) => {\n  const { findIcon } = useFindIcon()\n  return hasVoted ? null : (\n    <Grid container alignItems=\"center\">\n      <Grid item>\n        <Radio\n          icon={findIcon(gender)}\n          checkedIcon={findIcon(gender, true)}\n          value={gender}\n        />\n      </Grid>\n      <Grid item>\n        <Typography style={{ fontFamily: \"Courier New\" }}>{name}</Typography>\n      </Grid>\n    </Grid>\n  )\n}\n","import { Button, Grid, RadioGroup, Typography } from \"@material-ui/core\"\nimport React, { useEffect, useState } from \"react\"\nimport { Gender } from \"../../types/Gender\"\nimport { Names } from \"../../types/Names\"\nimport { useUpdateMetaData } from \"../../utils/useUpdateMetaData\"\nimport { RadioVote } from \"../RadioVote\"\n\nexport const Vote = () => {\n  const initialVotedState = JSON.parse(\n    window.localStorage.getItem(\"hasVoted\") as string,\n  )\n    ? true\n    : false\n  const [hasVoted, setHasVoted] = useState<boolean>(initialVotedState)\n  useEffect(() => {\n    window.localStorage.setItem(\"hasVoted\", JSON.stringify(hasVoted))\n  }, [hasVoted])\n  const [value, setValue] = useState<\"\" | Gender>(\"\")\n  const { handleUpdate } = useUpdateMetaData()\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue((event.target as HTMLInputElement).value as Gender)\n  }\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      style={{\n        width: 325,\n      }}\n    >\n      {hasVoted ? (\n        <Typography style={{ fontFamily: \"Courier\" }}>\n          Thanks for voting!\n        </Typography>\n      ) : (\n        <Typography style={{ fontFamily: \"Courier\" }}>Vote Below:</Typography>\n      )}\n      <RadioGroup value={value} onChange={handleChange}>\n        <RadioVote\n          name={Names.WALTER}\n          gender={Gender.BOY}\n          hasVoted={hasVoted}\n        />\n        <RadioVote\n          name={Names.LYNNETTE}\n          gender={Gender.GIRL}\n          hasVoted={hasVoted}\n        />\n      </RadioGroup>\n      {!hasVoted && (\n        <Button\n          variant=\"outlined\"\n          color=\"inherit\"\n          onClick={() => value !== \"\" && handleUpdate(value, setHasVoted)}\n        >\n          Vote\n        </Button>\n      )}\n    </Grid>\n  )\n}\n","import * as firebase from \"firebase/app\"\nimport { GlobalVote } from \"../../types/GlobalVote\"\nimport { useGetVotes } from \"../useGetVotes\"\n\nexport const useUpdateMetaData = () => {\n  const { boyValue, girlValue } = useGetVotes()\n  const updateMetaData = async (\n    boy: GlobalVote[\"boy\"],\n    girl: GlobalVote[\"girl\"],\n  ) => {\n    const db = firebase.firestore()\n    try {\n      const result = await db\n        .collection(\"voteGlobal\")\n        .doc(\"A4iNoZqlJQlUOiGMt5JH\")\n      return result.update({ girl, boy })\n    } catch (error) {\n      console.log(\"Unable to create document: \", error)\n    }\n    return undefined\n  }\n  const handleUpdate = (gender: \"boy\" | \"girl\", setHasVoted: Function) => {\n    gender === \"boy\"\n      ? updateMetaData(boyValue + 1, girlValue)\n      : updateMetaData(boyValue, girlValue + 1)\n    setHasVoted(true)\n  }\n  return { updateMetaData, handleUpdate }\n}\n","import app from \"firebase/app\"\nimport \"firebase/auth\"\nimport \"firebase/database\"\nimport \"firebase/firestore\"\n\nexport const firebase = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n}\n\nclass Firebase {\n  public constructor() {\n    app.initializeApp(firebase)\n  }\n}\n\nexport default Firebase\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                // tslint:disable-line\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\") // tslint:disable-line\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error) // tslint:disable-line\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      ) // tslint:disable-line\n    })\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            // tslint:disable-line\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./components/App\"\nimport \"firebase/firestore\"\nimport Firebase from \"./config\"\nimport \"./index.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nnew Firebase()\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { Grid, Typography } from \"@material-ui/core\"\nimport React from \"react\"\nimport \"./styles.css\"\nimport { CardVotePercentage } from \"../CardVotePercentage\"\nimport { ContainerDuck } from \"../ContainerDuck\"\nimport { Vote } from \"../ContainerVote\"\n\nexport function App() {\n  return (\n    <>\n      <Grid\n        container\n        className=\"App\"\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item>\n          <Typography\n            style={{ paddingTop: 24, fontFamily: \"Roboto\" }}\n            variant=\"h6\"\n          >\n            #WhoTheDuckIsIt\n          </Typography>\n        </Grid>\n        <CardVotePercentage>\n          <ContainerDuck />\n        </CardVotePercentage>\n        <Grid item>\n          <Vote />\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n"],"sourceRoot":""}