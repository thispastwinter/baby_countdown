{"version":3,"sources":["assets/rubber-duck.svg","components/Clock/index.tsx","utils/countdown/index.ts","components/ContainerDuck/index.tsx","serviceWorker.ts","index.tsx","components/App/index.tsx"],"names":["module","exports","useStyles","makeStyles","clock","minWidth","borderRadius","letterSpacing","lineHeight","fontSize","color","background","Clock","classes","finalDate","Date","getTime","useState","time","setTime","useEffect","setInterval","now","timeRemaining","days","Math","floor","hours","minutes","seconds","useGetTimeValues","Grid","container","direction","justify","className","CircularProgress","ContainerDuck","alignItems","item","style","padding","src","rubberduck","alt","Boolean","window","location","hostname","match","ReactDOM","render","marginTop","Card","margin","boxShadow","Typography","variant","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,yC,wPCKrCC,G,MAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,IACVC,aAAc,EACdC,cAAe,EACfC,WAAY,EACZC,SAAU,UACVC,MAAO,OACPC,WAAY,yBAIHC,EAAQ,WACnB,IAAMC,EAAUX,IADS,ECRK,WAC9B,IAAMY,EAAY,IAAIC,KAAK,2BAA2BC,UADH,EAE3BC,qBAF2B,mBAE5CC,EAF4C,KAEtCC,EAFsC,KAiBnD,OAdAC,qBAAU,WACRC,aAAY,WACV,IAAMC,GAAM,IAAIP,MAAOC,UACjBO,EAAgBT,EAAYQ,EAClCH,EAAQ,CACNK,KAAMC,KAAKC,MAAMH,EAAa,OAC9BI,MAAOF,KAAKC,MACTH,EAAa,MAAd,MAEFK,QAASH,KAAKC,MAAOH,EAAa,KAAd,KACpBM,QAASJ,KAAKC,MAAOH,EAAa,IAAkB,SAErD,OACF,CAACT,IACG,CACLU,KAAMN,GAAQA,EAAKM,KACnBG,MAAOT,GAAQA,EAAKS,MACpBC,QAASV,GAAQA,EAAKU,QACtBC,QAASX,GAAQA,EAAKW,SDXkBC,GAAlCN,EAFiB,EAEjBA,KAAMG,EAFW,EAEXA,MAAOC,EAFI,EAEJA,QAASC,EAFL,EAEKA,QAC9B,OACE,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,UAAWtB,EAAQT,OACjEoB,EACC,2BACGA,EADH,IACUG,EADV,IACkBC,EADlB,IAC4BC,GAG5B,kBAACO,EAAA,EAAD,CAAkB1B,MAAM,gBEtBnB2B,EAAgB,WAC3B,OACE,kBAACN,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVK,WAAW,SACXJ,QAAQ,iBAER,kBAACH,EAAA,EAAD,CAAMQ,MAAI,GACR,yBACEC,MAAO,CAAEC,QAAS,IAClBC,IAAKC,IACLR,UAAU,WACVS,IAAI,UAGR,kBAACb,EAAA,EAAD,CAAMQ,MAAI,GACR,kBAAC,EAAD,S,MCVYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCDT,WACL,OACE,kBAACpB,EAAA,EAAD,CACEC,WAAS,EACTG,UAAU,MACVF,UAAU,SACVC,QAAQ,SACRI,WAAW,SACXE,MAAO,CAAEY,UAAW,KAEpB,kBAACC,EAAA,EAAD,CACEb,MAAO,CACLnC,SAAU,IACVoC,QAAS,GACTa,OAAQ,GACRC,UAAW,kCACXjD,aAAc,EACdK,WACE,2EAGJ,kBAAC,EAAD,OAEF,kBAACoB,EAAA,EAAD,CAAMQ,MAAI,GACR,kBAACiB,EAAA,EAAD,CAAYC,QAAQ,MAApB,wBDvBQ,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e84be060.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rubber-duck.1f8e5c69.svg\";","import { CircularProgress, Grid, makeStyles } from \"@material-ui/core\"\nimport React from \"react\"\nimport { useGetTimeValues } from \"../../utils/countdown\"\nimport \"./index.scss\"\n\nconst useStyles = makeStyles({\n  clock: {\n    minWidth: 200,\n    borderRadius: 5,\n    letterSpacing: 4,\n    lineHeight: 0,\n    fontSize: \"1.25rem\",\n    color: \"#fff\",\n    background: \"rgba(0, 0, 0, 0.3)\",\n  },\n})\n\nexport const Clock = () => {\n  const classes = useStyles()\n  const { days, hours, minutes, seconds } = useGetTimeValues()\n  return (\n    <Grid container direction=\"row\" justify=\"center\" className={classes.clock}>\n      {days ? (\n        <p>\n          {days}:{hours}:{minutes}:{seconds}\n        </p>\n      ) : (\n        <CircularProgress color=\"secondary\" />\n      )}\n    </Grid>\n  )\n}\n","import { useEffect, useState } from \"react\"\n\nexport interface CountDownTime {\n  days?: number\n  hours?: number\n  minutes?: number\n  seconds?: number\n}\n\nexport const useGetTimeValues = (): CountDownTime => {\n  const finalDate = new Date(\"March 14, 2020 16:00:00\").getTime()\n  const [time, setTime] = useState<CountDownTime>()\n  useEffect(() => {\n    setInterval(() => {\n      const now = new Date().getTime()\n      const timeRemaining = finalDate - now\n      setTime({\n        days: Math.floor(timeRemaining / (1000 * 60 * 60 * 24)),\n        hours: Math.floor(\n          (timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),\n        ),\n        minutes: Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60)),\n        seconds: Math.floor((timeRemaining % (1000 * 60)) / 1000),\n      })\n    }, 1000)\n  }, [finalDate])\n  return {\n    days: time && time.days,\n    hours: time && time.hours,\n    minutes: time && time.minutes,\n    seconds: time && time.seconds,\n  }\n}\n","import { Grid } from \"@material-ui/core\"\nimport React from \"react\"\nimport rubberduck from \"../../assets/rubber-duck.svg\"\nimport { Clock } from \"../Clock\"\n\nexport const ContainerDuck = () => {\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"space-between\"\n    >\n      <Grid item>\n        <img\n          style={{ padding: 24 }}\n          src={rubberduck}\n          className=\"App-logo\"\n          alt=\"logo\"\n        />\n      </Grid>\n      <Grid item>\n        <Clock />\n      </Grid>\n    </Grid>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                // tslint:disable-line\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\") // tslint:disable-line\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error) // tslint:disable-line\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      ) // tslint:disable-line\n    })\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            // tslint:disable-line\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./components/App\"\nimport \"./index.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { Card, Grid, Typography } from \"@material-ui/core\"\nimport React from \"react\"\nimport \"./styles.css\"\nimport { ContainerDuck } from \"../ContainerDuck\"\n\nexport function App() {\n  return (\n    <Grid\n      container\n      className=\"App\"\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n      style={{ marginTop: 24 }}\n    >\n      <Card\n        style={{\n          minWidth: 325,\n          padding: 75,\n          margin: 16,\n          boxShadow: \"0px 2px 6px rgba(0, 0, 0, 0.15)\",\n          borderRadius: 8,\n          background:\n            \"linear-gradient(90deg, rgba(213,80,211,1) 21%, rgba(0,255,224,1) 100%)\",\n        }}\n      >\n        <ContainerDuck />\n      </Card>\n      <Grid item>\n        <Typography variant=\"h5\">#WhoTheDuckIsIt?</Typography>\n      </Grid>\n    </Grid>\n  )\n}\n"],"sourceRoot":""}